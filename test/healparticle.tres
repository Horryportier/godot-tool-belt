[gd_resource type="VisualShader" load_steps=11 format=3 uid="uid://bhv0lcdi36qwb"]

[sub_resource type="Gradient" id="Gradient_lw5fe"]
offsets = PackedFloat32Array(0, 0.537815, 1)
colors = PackedColorArray(0, 0, 0, 0, 0.1, 3, 0.1, 1, 0, 0, 0, 0)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_yfrfl"]
gradient = SubResource("Gradient_lw5fe")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ntykx"]
expanded_output_ports = [0]
texture = SubResource("GradientTexture1D_yfrfl")

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_6e6ir"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_5ufhk"]
input_name = "time"

[sub_resource type="VisualShaderNodeParticleRandomness" id="VisualShaderNodeParticleRandomness_6l8m1"]
default_input_values = [1, Vector2(-1000, -1000), 2, Vector2(1000, 1000)]
op_type = 1

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_5a8et"]
op_type = 0

[sub_resource type="VisualShaderNodeParticleRandomness" id="VisualShaderNodeParticleRandomness_ovnnj"]
default_input_values = [1, Vector2(-1, -1), 2, Vector2(1, 1)]
expanded_output_ports = [0]
op_type = 1

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_d2c4l"]
parameter_name = "Vector2Parameter"

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_fq0ip"]
parameter_name = "Vector2Parameter2"

[resource]
code = "shader_type particles;
uniform vec2 Vector2Parameter;
uniform vec2 Vector2Parameter2;
uniform sampler2D tex_start_10;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec2 __randv2_range(inout uint seed, vec2 from, vec2 to) {
	return vec2(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y));
}

vec3 __randv3_range(inout uint seed, vec3 from, vec3 to) {
	return vec3(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z));
}

vec4 __randv4_range(inout uint seed, vec4 from, vec4 to) {
	return vec4(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z), __randf_range(seed, from.w, to.w));
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// Vector2Parameter:7
		vec2 n_out7p0 = Vector2Parameter;


// Vector2Parameter:8
		vec2 n_out8p0 = Vector2Parameter2;


// ParticleRandomness:6
		vec2 n_out6p0 = __randv2_range(__seed, n_out7p0, n_out8p0);
		float n_out6p1 = n_out6p0.r;
		float n_out6p2 = n_out6p0.g;


// VectorCompose:5
		vec2 n_out5p0 = vec2(n_out6p1, n_out6p2);


// Texture2D:10
		vec4 n_out10p0 = texture(tex_start_10, vec2(0.0));


// ParticleRandomness:3
		vec2 n_in3p1 = vec2(-1000.00000, -1000.00000);
		vec2 n_in3p2 = vec2(1000.00000, 1000.00000);
		vec2 n_out3p0 = __randv2_range(__seed, n_in3p1, n_in3p2);


// StartOutput:0
		VELOCITY = vec3(n_out5p0, 0.0);
		COLOR.rgb = vec3(n_out10p0.xyz);
		if (RESTART_POSITION) {
			TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(vec3(n_out3p0, 0.0), 1.0));
			if (RESTART_VELOCITY) {
				VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
			}
			TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		}


	}
}

"
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/3/node = SubResource("VisualShaderNodeParticleRandomness_6l8m1")
nodes/start/3/position = Vector2(226.909, 495.636)
nodes/start/5/node = SubResource("VisualShaderNodeVectorCompose_5a8et")
nodes/start/5/position = Vector2(260, 120)
nodes/start/6/node = SubResource("VisualShaderNodeParticleRandomness_ovnnj")
nodes/start/6/position = Vector2(-21.7666, 86.0774)
nodes/start/7/node = SubResource("VisualShaderNodeVec2Parameter_d2c4l")
nodes/start/7/position = Vector2(-280, 80)
nodes/start/8/node = SubResource("VisualShaderNodeVec2Parameter_fq0ip")
nodes/start/8/position = Vector2(-260, 240)
nodes/start/10/node = SubResource("VisualShaderNodeTexture_ntykx")
nodes/start/10/position = Vector2(0, 340)
nodes/start/11/node = SubResource("VisualShaderNodeUVFunc_6e6ir")
nodes/start/11/position = Vector2(100, 820)
nodes/start/12/node = SubResource("VisualShaderNodeInput_5ufhk")
nodes/start/12/position = Vector2(-260, 420)
nodes/start/connections = PackedInt32Array(3, 0, 0, 4, 5, 0, 0, 1, 6, 1, 5, 0, 6, 2, 5, 1, 7, 0, 6, 1, 8, 0, 6, 2, 10, 0, 0, 2)
