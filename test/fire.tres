[gd_resource type="VisualShader" load_steps=10 format=3 uid="uid://bpuicpitl1thu"]

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_73qd8"]
parameter_name = "VelocityMin"

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_1gjjy"]
parameter_name = "VelocityMax"

[sub_resource type="VisualShaderNodeParticleRandomness" id="VisualShaderNodeParticleRandomness_n8a4n"]
default_input_values = [1, Vector2(-1, -1), 2, Vector2(1, 1)]
op_type = 1

[sub_resource type="Gradient" id="Gradient_ptku3"]
offsets = PackedFloat32Array(0, 0.512605, 1)
colors = PackedColorArray(20, 0.1, 0, 1, 14.8739, 0.561345, 0, 1, 10, 1, 0, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_7qli4"]
gradient = SubResource("Gradient_ptku3")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_eynrq"]
texture = SubResource("GradientTexture1D_7qli4")
texture_type = 1

[sub_resource type="FastNoiseLite" id="FastNoiseLite_xnvlo"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_otymo"]
noise = SubResource("FastNoiseLite_xnvlo")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ehanw"]
texture = SubResource("NoiseTexture2D_otymo")

[resource]
code = "shader_type particles;
uniform vec2 VelocityMin;
uniform vec2 VelocityMax;
uniform sampler2D tex_start_6 : source_color;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec2 __randv2_range(inout uint seed, vec2 from, vec2 to) {
	return vec2(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y));
}

vec3 __randv3_range(inout uint seed, vec3 from, vec3 to) {
	return vec3(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z));
}

vec4 __randv4_range(inout uint seed, vec4 from, vec4 to) {
	return vec4(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z), __randf_range(seed, from.w, to.w));
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// Vector2Parameter:2
		vec2 n_out2p0 = VelocityMin;


// Vector2Parameter:4
		vec2 n_out4p0 = VelocityMax;


// ParticleRandomness:5
		vec2 n_out5p0 = __randv2_range(__seed, n_out2p0, n_out4p0);


// Texture2D:6
		vec4 n_out6p0 = texture(tex_start_6, vec2(0.0));


// StartOutput:0
		VELOCITY = vec3(n_out5p0, 0.0);
		COLOR.rgb = vec3(n_out6p0.xyz);
		if (RESTART_POSITION) {
			TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
			if (RESTART_VELOCITY) {
				VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
			}
			TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		}


	}
}

"
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/0/position = Vector2(440, 160)
nodes/start/2/node = SubResource("VisualShaderNodeVec2Parameter_73qd8")
nodes/start/2/position = Vector2(-100, 420)
nodes/start/4/node = SubResource("VisualShaderNodeVec2Parameter_1gjjy")
nodes/start/4/position = Vector2(-100, 540)
nodes/start/5/node = SubResource("VisualShaderNodeParticleRandomness_n8a4n")
nodes/start/5/position = Vector2(120, 420)
nodes/start/6/node = SubResource("VisualShaderNodeTexture_eynrq")
nodes/start/6/position = Vector2(-120, 140)
nodes/start/7/node = SubResource("VisualShaderNodeTexture_ehanw")
nodes/start/7/position = Vector2(-120, 280)
nodes/start/connections = PackedInt32Array(2, 0, 5, 1, 4, 0, 5, 2, 6, 0, 0, 2, 5, 0, 0, 1)
