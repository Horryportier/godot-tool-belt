[gd_resource type="VisualShader" load_steps=9 format=3 uid="uid://cbjn6esi52648"]

[sub_resource type="VisualShaderNodeParticleRandomness" id="VisualShaderNodeParticleRandomness_26n6v"]
default_input_values = [1, Quaternion(0, 0, 0, -0.975), 2, Quaternion(10, 1, 1, 1)]
op_type = 3

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_uefrd"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_31hvk"]
input_name = "lifetime"

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_u1rf6"]
constant = Color(0, 0, 0, 1)

[sub_resource type="VisualShaderNodeParticleRandomness" id="VisualShaderNodeParticleRandomness_x7pjt"]
default_input_values = [1, Quaternion(0, 0, 0, -0.975), 2, Quaternion(10, 1, 1, 1)]
op_type = 3

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_a5x2f"]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_4pbbb"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_bb74s"]
constant = Color(10, 0, 0, 1)

[resource]
code = "shader_type particles;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec2 __randv2_range(inout uint seed, vec2 from, vec2 to) {
	return vec2(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y));
}

vec3 __randv3_range(inout uint seed, vec3 from, vec3 to) {
	return vec3(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z));
}

vec4 __randv4_range(inout uint seed, vec4 from, vec4 to) {
	return vec4(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z), __randf_range(seed, from.w, to.w));
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// ColorConstant:5
		vec4 n_out5p0 = vec4(10.000000, 0.000000, 0.000000, 1.000000);


// Input:3
		float n_out3p0 = TIME;


// ParticleRandomness:2
		vec4 n_in2p1 = vec4(0.00000, 0.00000, 0.00000, -0.97500);
		vec4 n_in2p2 = vec4(10.00000, 1.00000, 1.00000, 1.00000);
		vec4 n_out2p0 = __randv4_range(uint(n_out3p0), n_in2p1, n_in2p2);


// VectorDecompose:4
		float n_out4p0 = n_out2p0.x;
		float n_out4p1 = n_out2p0.y;
		float n_out4p2 = n_out2p0.z;
		float n_out4p3 = n_out2p0.w;


// StartOutput:0
		COLOR.rgb = vec3(n_out5p0.xyz);
		if (RESTART_POSITION) {
			TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
			if (RESTART_VELOCITY) {
				VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
			}
			TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		}
		TRANSFORM *= __build_rotation_mat4(vec3(0, 1, 0), n_out4p1);
		TRANSFORM *= mat4(vec4(n_out4p0, 0, 0, 0), vec4(0, n_out4p0, 0, 0), vec4(0, 0, n_out4p0, 0), vec4(0, 0, 0, 1));


	}
}

void process() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// ColorConstant:5
		vec4 n_out5p0 = vec4(0.000000, 0.000000, 0.000000, 1.000000);


// Input:4
		float n_out4p0 = LIFETIME;


// ParticleRandomness:2
		vec4 n_in2p1 = vec4(0.00000, 0.00000, 0.00000, -0.97500);
		vec4 n_in2p2 = vec4(10.00000, 1.00000, 1.00000, 1.00000);
		vec4 n_out2p0 = __randv4_range(uint(n_out4p0), n_in2p1, n_in2p2);


// VectorDecompose:3
		float n_out3p0 = n_out2p0.x;
		float n_out3p1 = n_out2p0.y;
		float n_out3p2 = n_out2p0.z;
		float n_out3p3 = n_out2p0.w;


// ProcessOutput:0
		COLOR.rgb = vec3(n_out5p0.xyz);
		COLOR.a = n_out3p2;
		TRANSFORM = __build_rotation_mat4(vec3(0, 1, 0), n_out3p1);
		TRANSFORM = mat4(vec4(n_out3p0, 0, 0, 0), vec4(0, n_out3p0, 0, 0), vec4(0, 0, n_out3p0, 0), vec4(0, 0, 0, 1));


	}
}

"
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/2/node = SubResource("VisualShaderNodeParticleRandomness_x7pjt")
nodes/start/2/position = Vector2(40, 180)
nodes/start/3/node = SubResource("VisualShaderNodeInput_a5x2f")
nodes/start/3/position = Vector2(-180, 180)
nodes/start/4/node = SubResource("VisualShaderNodeVectorDecompose_4pbbb")
nodes/start/4/position = Vector2(212, 278.2)
nodes/start/5/node = SubResource("VisualShaderNodeColorConstant_bb74s")
nodes/start/5/position = Vector2(184, 178.7)
nodes/start/connections = PackedInt32Array(3, 0, 2, 0, 2, 0, 4, 0, 4, 0, 0, 5, 4, 1, 0, 7, 5, 0, 0, 2)
nodes/process/2/node = SubResource("VisualShaderNodeParticleRandomness_26n6v")
nodes/process/2/position = Vector2(20, 160)
nodes/process/3/node = SubResource("VisualShaderNodeVectorDecompose_uefrd")
nodes/process/3/position = Vector2(180, 240)
nodes/process/4/node = SubResource("VisualShaderNodeInput_31hvk")
nodes/process/4/position = Vector2(-160, 160)
nodes/process/5/node = SubResource("VisualShaderNodeColorConstant_u1rf6")
nodes/process/5/position = Vector2(220, 160)
nodes/process/connections = PackedInt32Array(2, 0, 3, 0, 3, 0, 0, 4, 4, 0, 2, 0, 3, 1, 0, 6, 3, 2, 0, 3, 5, 0, 0, 2)
